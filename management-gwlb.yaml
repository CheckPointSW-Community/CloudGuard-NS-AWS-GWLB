AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a Check Point Management Server (20210525)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Network Configuration
        Parameters:
          - VPC
          - ManagementSubnet
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - ManagementName
          - ManagementInstanceType
          - KeyName
          - AllocatePublicAddress
          - VolumeSize
          - VolumeEncryption
          - EnableInstanceConnect
      - Label:
          default: IAM Permissions (ignored when the installation is not Primary Management
            Server)
        Parameters:
          - ManagementPermissions
          - ManagementPredefinedRole
          - ManagementSTSRoles
      - Label:
          default: Check Point Settings
        Parameters:
          - ManagementVersion
          - Shell
          - ManagementPasswordHash
      - Label:
          default: Security Management Server Settings
        Parameters:
          - ManagementHostname
          - PrimaryManagement
          - ManagementSICKey
          - AllowUploadDownload
          - AdminCIDR
          - GatewayManagement
          - GatewaysAddresses
          - ManagementBootstrapScript
          - NTPPrimary
          - NTPSecondary
    ParameterLabels:
      VPC:
        default: VPC
      ManagementSubnet:
        default: Management subnet
      ManagementName:
        default: Management name
      ManagementInstanceType:
        default: Instance type
      KeyName:
        default: Key name
      AllocatePublicAddress:
        default: Allocate an Elastic IP
      VolumeSize:
        default: Root volume size (GB)
      VolumeEncryption:
        default: Volume encryption KMS key identifier
      EnableInstanceConnect:
        default: Enable AWS Instance Connect
      ManagementPermissions:
        default: IAM role
      ManagementPredefinedRole:
        default: Existing IAM role name
      ManagementSTSRoles:
        default: STS roles
      ManagementVersion:
        default: Version & license
      Shell:
        default: Admin shell
      ManagementPasswordHash:
        default: Password hash
      ManagementHostname:
        default: Management hostname
      PrimaryManagement:
        default: Primary management
      ManagementSICKey:
        default: SIC key
      AllowUploadDownload:
        default: Allow upload & download
      AdminCIDR:
        default: Administrator addresses
      GatewayManagement:
        default: Gateways management
      GatewaysAddresses:
        default: Gateways addresses
      ManagementBootstrapScript:
        default: Management bootstrap script
      NTPPrimary:
        default: Primary NTP server
      NTPSecondary:
        default: Secondary NTP server
Parameters:
  VPC:
    Description: Select an existing VPC
    Type: AWS::EC2::VPC::Id
    MinLength: 1
  ManagementSubnet:
    Description: To access the instance from the internet, make sure the subnet has
      a route to the internet
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
  ManagementName:
    Description: The Management name tag
    Type: String
    Default: Check-Point-Management
  ManagementInstanceType:
    Description: The instance type of the Security Management Server
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AllocatePublicAddress:
    Description: Allocate an elastic IP for the Management
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  VolumeSize:
    Type: Number
    MinValue: 100
    Default: 100
  VolumeEncryption:
    Description: KMS or CMK key Identifier - Use key ID, alias or ARN. Key alias should be prefixed with 'alias/' (e.g. for KMS default alias 'aws/ebs' - insert 'alias/aws/ebs')
    Type: String
    Default: alias/aws/ebs
  EnableInstanceConnect:
    Description: Enable SSH connection over AWS web console
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  ManagementPermissions:
    Description: IAM role to attach to the instance profile
    Type: String
    Default: Create with read permissions
    AllowedValues:
      - None (configure later)
      - Use existing (specify an existing IAM role name)
      - Create with assume role permissions (specify an STS role ARN)
      - Create with read permissions
      - Create with read-write permissions
  ManagementPredefinedRole:
    Description: A predefined IAM role to attach to the instance profile. Ignored
      if IAM role is not set to 'Use existing'
    Type: String
    Default: ''
  ManagementSTSRoles:
    Description: The IAM role will be able to assume these STS Roles (comma separated
      list of ARNs, without spaces). Ignored if IAM role is set to 'None' or 'Use
      existing'
    Type: CommaDelimitedList
    Default: ''
  ManagementVersion:
    Description: The license to install on the Security Management Server
    Type: String
    Default: R80.40-PAYG
    AllowedValues:
      - R80.40-BYOL
      - R80.40-PAYG
  Shell:
    Description: Change the admin shell to enable advanced command line configuration
    Type: String
    Default: /etc/cli.sh
    AllowedValues:
      - /etc/cli.sh
      - /bin/bash
      - /bin/csh
      - /bin/tcsh
  ManagementPasswordHash:
    Description: Admin user's password hash (use command "openssl passwd -6 PASSWORD"
      to get the PASSWORD's hash) (optional)
    Type: String
    Default: ''
    AllowedPattern: '[\$\./a-zA-Z0-9]*'
    NoEcho: true
  ManagementHostname:
    Description: (optional)
    Type: String
    Default: mgmt-aws
    AllowedPattern: '^([A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?|)$'
    ConstraintDescription: A valid hostname label or an empty string
  PrimaryManagement:
    Description: Determines if this is the primary Management Server or not
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  ManagementSICKey:
    Description: >-
      Mandatory only if deploying a secondary Management Server, the Secure Internal
      Communication key creates trusted connections between Check Point components.
      Choose a random string consisting of at least 8 alphanumeric characters
    Type: String
    Default: ''
    AllowedPattern: '(|[a-zA-Z0-9]{8,})'
    ConstraintDescription: Can be empty if this is a primary Management Server. Otherwise,
      at least 8 alpha numeric characters
    NoEcho: true
  AllowUploadDownload:
    Description: Automatically download Blade Contracts and other important data.
      Improve product experience by sending data to Check Point
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  AdminCIDR:
    Description: Allow web, SSH, and graphical clients only from this network to communicate
      with the Management Server
    Type: String
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
  GatewaysAddresses:
    Description: Allow gateways only from this network to communicate with the Management
      Server
    Type: String
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
  GatewayManagement:
    Description: Select 'Over the internet' if any of the gateways you wish to manage
      are not directly accessed via their private IP address
    Type: String
    Default: Locally managed
    AllowedValues:
      - Locally managed
      - Over the internet
  ManagementBootstrapScript:
    Description: An optional script with semicolon (;) separated commands to run on the initial boot (optional)
    Type: String
    Default: ''
    NoEcho: true
  NTPPrimary:
    Description: (optional)
    Type: String
    Default: 169.254.169.123
    AllowedPattern: '[\.a-zA-Z0-9\-]*'
  NTPSecondary:
    Description: (optional)
    Type: String
    Default: 0.pool.ntp.org
    AllowedPattern: '[\.a-zA-Z0-9\-]*'
Conditions:
  EIP: !Equals [!Ref AllocatePublicAddress, true]
  ManageOverInternet: !Equals [!Ref GatewayManagement, Over the internet]
  ManageOverInternetAndEIP: !And [!Condition EIP, !Condition ManageOverInternet]
  CreateRole: !Or
    - !Equals [!Ref ManagementPermissions, Create with assume role permissions (specify an STS role ARN)]
    - !Equals [!Ref ManagementPermissions, Create with read permissions]
    - !Equals [!Ref ManagementPermissions, Create with read-write permissions]
  EncryptedVolume: !Not [!Equals [!Ref VolumeEncryption, '']]
  UseRole: !Not [!Equals [!Ref ManagementPermissions, None (configure later)]]
  NoSIC: !Equals [!Ref ManagementSICKey, '']
Resources:
  AMI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/utils/amis.yaml
      Parameters:
        Version: !Join ['-', [!Ref ManagementVersion, MGMT]]
  ManagementReadyHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: EIP
    Properties: {}
  ManagementReadyCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: EIP
    DependsOn: ManagementInstance
    Properties:
      Handle: !Ref ManagementReadyHandle
      Timeout: 1800
  ManagementSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Management security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 257
          ToPort: 257
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 8211
          ToPort: 8211
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18191
          ToPort: 18191
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18192
          ToPort: 18192
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18210
          ToPort: 18210
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18211
          ToPort: 18211
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18221
          ToPort: 18221
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18264
          ToPort: 18264
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 18190
          ToPort: 18190
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 19009
          ToPort: 19009
  ManagementRoleStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateRole
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/gwlb/cme-iam-role-gwlb.yaml
      Parameters:
        Permissions: !Ref ManagementPermissions
        STSRoles: !Join [',', !Ref ManagementSTSRoles]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: UseRole
    Properties:
      Path: /
      Roles:
        - !If [CreateRole, !GetAtt ManagementRoleStack.Outputs.CMEIAMRole, !Ref ManagementPredefinedRole]
  ManagementInstance:
    Type: AWS::EC2::Instance
    DependsOn: ManagementSecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ManagementName
      ImageId: !GetAtt AMI.Outputs.ImageId
      InstanceType: !Ref ManagementInstanceType
      IamInstanceProfile: !If [UseRole, !Ref InstanceProfile, !Ref 'AWS::NoValue']
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          Description: eth0
          GroupSet:
            - !Ref ManagementSecurityGroup
          DeleteOnTermination: true
          SubnetId: !Ref ManagementSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: !If [EncryptedVolume, true, false]
            KmsKeyId: !If [EncryptedVolume, !Ref VolumeEncryption, !Ref 'AWS::NoValue']
            VolumeType: gp2
            VolumeSize: !Ref VolumeSize
      UserData:
        'Fn::Base64':
          !Join
          - |+

          - - '#!/bin/bash'
            - 'set -e'
            - 'logfile=/var/log/aws-user-data.log'
            - '> ${logfile}'
            - 'exec 1>>${logfile} 2>>${logfile}'
            - 'function report-status() {'
            - '    local rc=${?}'
            - '    local status=""'
            - '    local reason="Security Management Server configuration"'
            - '    local data=""'
            - '    set +e'
            - '    printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >${CPDIR}/tmp/wait-handle.crt'
            - '    cat ${CPDIR}/conf/ca-bundle.crt >>${CPDIR}/tmp/wait-handle.crt'
            - '    if [[ ${rc} -eq 0 ]]; then'
            - '        status="SUCCESS"'
            - '        reason+=" completed"'
            - '        data="Configuration completed."'
            - '    else'
            - '        status="FAILURE"'
            - '        reason+=" failed"'
            - '        data="None"'
            - '    fi'
            - '    echo "Reporting status ${status}: ${reason}"'
            - '    curl_cli -s -S --cacert ${CPDIR}/tmp/wait-handle.crt -X PUT -H "Content-Type:" --data-binary "{\"Status\" : \"${status}\", \"Reason\" : \"${reason}\", \"UniqueId\" : \"${instance_id}\", \"Data\" : \"${data}\"}" ${wait_handle}'
            - '}'
            - 'echo -e "\nStarting user-data\n"'
            - 'echo "Setting up parameters"'
            - !Sub 'pwd_hash=''${ManagementPasswordHash}'' ; shell=${Shell} ; allow_info=${AllowUploadDownload} ; hostname=${ManagementHostname} ; primary=${PrimaryManagement} ; eic=${EnableInstanceConnect} ; admin_subnet=${AdminCIDR} ; eip=${AllocatePublicAddress} ; ntp1=${NTPPrimary} ; ntp2=${NTPSecondary}'
            - !If [EIP, !Sub 'wait_handle=''${ManagementReadyHandle}''',!Ref 'AWS::NoValue']
            - !If [NoSIC, 'sic=""', !Join ['', ['sic="$(echo ', 'Fn::Base64': !Ref ManagementSICKey, ' | base64 -d)"']]]
            - !If [ManageOverInternetAndEIP, 'pub_mgmt=true', 'pub_mgmt=false']
            - !Join ['', ['bootstrap="$(echo ', 'Fn::Base64': !Ref ManagementBootstrapScript, ' | base64 -d)"']]
            - 'instance_id="$(curl_cli -s -S 169.254.169.254/latest/meta-data/instance-id)"'
            - 'if [[ -n ${wait_handle} ]] && ${eip}; then'
            - '    trap report-status EXIT'
            - 'fi'
            - 'echo "Updating cloud-version file"'
            - 'template="management"'
            - 'cv_path="/etc/cloud-version"'
            - 'echo "Updating cloud-version file"'
            - 'if test -f ${cv_path}; then'
            - '    echo template_name: ${template} >> ${cv_path}'
            - '    echo template_version: 20210525 >> ${cv_path}'
            - 'fi'
            - 'cv_json_path="/etc/cloud-version.json"'
            - 'cv_json_path_tmp="/etc/cloud-version-tmp.json"'
            - 'if test -f ${cv_json_path}; then'
            - '    cat ${cv_json_path} | jq ''.template_name = "''"${template}"''"'' | jq ''.template_version = "20210525"'' > ${cv_json_path_tmp}'
            - '    mv ${cv_json_path_tmp} ${cv_json_path}'
            - 'fi'
            - 'if [[ -z ${pwd_hash} ]]; then'
            - '    echo "Generating random password hash"'
            - '    pwd_hash="$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)"'
            - 'fi'
            - 'echo "Setting admin password"'
            - 'clish -c "set user admin password-hash ${pwd_hash}" -s'
            - 'echo "Setting admin shell to ${shell}"'
            - 'clish -c "set user admin shell ${shell}" -s'
            - 'if [[ -n ${ntp1} ]]; then'
            - '    echo "Setting primary NTP server to ${ntp1}"'
            - '    clish -c "set ntp server primary ${ntp1} version 4" -s'
            - '    if [[ -n ${ntp2} ]]; then'
            - '        echo "Setting secondary NTP server to ${ntp2}"'
            - '        clish -c "set ntp server secondary ${ntp2} version 4" -s'
            - '    fi'
            - '    clish -c "set ntp active on" -s'
            - 'fi'
            - 'if [[ -n ${hostname} ]]; then'
            - '    echo "Setting hostname to ${hostname}"'
            - '    clish -c "set hostname ${hostname}" -s'
            - 'fi'
            - 'if [[ "0.0.0.0/0" == ${admin_subnet} ]]; then'
            - '    mgmt_clients="mgmt_gui_clients_radio=any"'
            - 'else'
            - '    admin_subnet_ip="$(echo ${admin_subnet} | cut -d / -f 1)"'
            - '    admin_subnet_bits="$(echo ${admin_subnet} | cut -d / -f 2)"'
            - '    mgmt_clients="mgmt_gui_clients_radio=network&mgmt_gui_clients_ip_field=${admin_subnet_ip}&mgmt_gui_clients_subnet_field=${admin_subnet_bits}"'
            - 'fi'
            - 'if ${primary}; then'
            - '    secondary=false'
            - '    sic=notused'
            - 'else'
            - '    secondary=true'
            - 'fi'
            - 'echo "Starting First Time Wizard"'
            - 'config_system -s "install_security_gw=false&install_security_managment=true&${mgmt_clients}&install_mgmt_primary=${primary}&install_mgmt_secondary=${secondary}&mgmt_admin_radio=gaia_admin&ftw_sic_key=${sic}&download_info=${allow_info}&upload_info=${allow_info}"'
            - 'if ${eic}; then'
            - '    echo "Enabling ec2 instance connect"'
            - '    if [[ -d "/etc/ec2-instance-connect" ]]; then'
            - '        ec2-instance-connect-config on'
            - '    else'
            - '        echo "Could not enable eic, /etc/ec2-instance-connect was not found"'
            - '    fi'
            - 'fi'
            - 'if ${primary}; then'
            - '    until mgmt_cli -r true discard; do'
            - '        sleep 30'
            - '    done'
            - 'fi'
            - 'if ${pub_mgmt}; then'
            - '    addr="$(ip addr show dev eth0 | sed -n -e ''s|^ *inet \([^/]*\)/.*eth0$|\1|p'')"'
            - '    pub_addr="$(ip addr show dev eth0 | sed -n -e ''s|^ *inet \([^/]*\)/.*eth0:1$|\1|p'')"'
            - '    uid="$(mgmt_cli -r true show-generic-objects class-name com.checkpoint.objects.classes.dummy.CpmiHostCkp details-level full -f json | jq -r ''.objects[] | select(.ipaddr == "''"${addr}"''") | .uid'')"'
            - '    if [[ -n ${uid}  && -n ${pub_addr} ]]; then'
            - '        mgmt_cli -r true set-generic-object uid "${uid}" ipaddr "${pub_addr}"'
            - '    fi'
            - 'fi'
            - 'chkconfig --add autoprovision'
            - 'service autoprovision start'
            - 'if [[ -n ${bootstrap} ]]; then'
            - '    echo "Invoking bootstrap script"'
            - '    eval ${bootstrap}'
            - 'fi'
  PublicAddress:
    Type: AWS::EC2::EIP
    Condition: EIP
    Properties:
      Domain: vpc
  AddressAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: EIP
    DependsOn: ManagementInstance
    Properties:
      InstanceId: !Ref ManagementInstance
      AllocationId: !GetAtt PublicAddress.AllocationId
Outputs:
  PublicAddress:
    Condition: EIP
    Description: The public address of the Management Server
    Value: !Ref PublicAddress
  SSH:
    Condition: EIP
    Description: SSH command
    Value: !Join ['', ['ssh -i ', !Ref KeyName, ' admin@', !Ref PublicAddress]]
  URL:
    Condition: EIP
    Description: URL to the portal
    Value: !Join ['', ['https://', !Ref PublicAddress]]
