AWSTemplateFormatVersion: 2010-09-09
Description: Create an Auto Scaling group of Check Point gateways (20210525)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Network Configuration
        Parameters:
          - VPC
          - GatewaysSubnets
      - Label:
          default: EC2 Instances Configuration
        Parameters:
          - GatewayName
          - GatewayInstanceType
          - KeyName
          - VolumeSize
          - EnableVolumeEncryption
          - EnableInstanceConnect
      - Label:
          default: Auto Scaling Configuration
        Parameters:
          - GatewaysMinSize
          - GatewaysMaxSize
          - AdminEmail
          - GatewaysTargetGroups
      - Label:
          default: Check Point Settings
        Parameters:
          - GatewayVersion
          - Shell
          - GatewayPasswordHash
          - GatewaySICKey
          - AllowUploadDownload
          - CloudWatch
          - GatewayBootstrapScript
      - Label:
          default: Automatic Provisioning with Security Management Server Settings
        Parameters:
          - ControlGatewayOverPrivateOrPublicAddress
          - ManagementServer
          - ConfigurationTemplate
      - Label:
          default: Proxy Configuration (optional)
        Parameters:
          - ELBType
          - ELBPort
          - ELBClients
    ParameterLabels:
      VPC:
        default: VPC
      GatewaysSubnets:
        default: Gateways subnets
      GatewayName:
        default: Gateways name
      GatewayInstanceType:
        default: Gateways instance type
      KeyName:
        default: Key name
      VolumeSize:
        default: Root volume size (GB)
      EnableVolumeEncryption:
        default: Enable volume encryption
      EnableInstanceConnect:
        default: Enable AWS Instance Connect
      GatewaysMinSize:
        default: Minimum Gateway group size
      GatewaysMaxSize:
        default: Maximum Gateway group size
      AdminEmail:
        default: Email address
      GatewaysTargetGroups:
        default: Gateways target groups
      GatewayVersion:
        default: Gateways version & license
      Shell:
        default: Admin shell
      GatewayPasswordHash:
        default: Gateways Password hash
      GatewaySICKey:
        default: Gateways SIC key
      AllowUploadDownload:
        default: Allow upload & download
      CloudWatch:
        default: CloudWatch metrics
      GatewayBootstrapScript:
        default: Gateways bootstrap script
      ControlGatewayOverPrivateOrPublicAddress:
        default: Gateways addresses
      ManagementServer:
        default: Management Server
      ConfigurationTemplate:
        default: Configuration template
      ELBType:
        default: Proxy type
      ELBPort:
        default: Proxy port
      ELBClients:
        default: Allowed proxy clients
Parameters:
  VPC:
    Description: Select an existing VPC
    Type: AWS::EC2::VPC::Id
    MinLength: 1
  GatewaysSubnets:
    Description: Select at least 2 public subnets in the VPC
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: 2
  GatewayName:
    Description: The name tag of the Security Gateway instances (optional)
    Type: String
    Default: Check-Point-Gateway
  GatewayInstanceType:
    Description: The instance type of the Secutiry Gateways
    Type: String
    Default: c5.xlarge
    AllowedValues:
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  VolumeSize:
    Type: Number
    Default: 100
    MinValue: 100
  EnableVolumeEncryption:
    Description: Encrypt Auto Scaling instances volume with default AWS KMS key
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  EnableInstanceConnect:
    Description: Enable SSH connection over AWS web console
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  GatewaysMinSize:
    Description: The minimal number of gateways in the Auto Scaling group
    Type: Number
    Default: 2
    MinValue: 1
  GatewaysMaxSize:
    Description: The maximal number of gateways in the Auto Scaling group
    Type: Number
    Default: 10
    MinValue: 1
  AdminEmail:
    Description: Notifications about scaling events will be sent to this email address (optional)
    Type: String
    Default: ''
    AllowedPattern: '^(([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?))?$'
    ConstraintDescription: Must be a valid email address.
  GatewaysTargetGroups:
    Description: A list of Target Groups to associate with the Auto Scaling
      group (comma separated list of ARNs, without spaces) (optional)
    Type: String
    Default: ''
  GatewayVersion:
    Type: String
    Default: R80.40-BYOL
    AllowedValues:
      - R80.40-BYOL
      - R80.40-PAYG-NGTP
      - R80.40-PAYG-NGTX
  Shell:
    Description: Change the admin shell to enable advanced command line configuration
    Type: String
    Default: /etc/cli.sh
    AllowedValues:
      - /etc/cli.sh
      - /bin/bash
      - /bin/csh
      - /bin/tcsh
  GatewayPasswordHash:
    Description: Admin user's password hash (use command "openssl passwd -6 PASSWORD"
      to get the PASSWORD's hash) (optional)
    Type: String
    Default: ''
    AllowedPattern: '^[\$\./a-zA-Z0-9]*$'
    NoEcho: true
  GatewaySICKey:
    Description: The Secure Internal Communication key creates trusted connections
      between Check Point components. Choose a random string consisting of at least
      8 alphanumeric characters.
    Type: String
    AllowedPattern: '^[a-zA-Z0-9]{8,}$'
    ConstraintDescription: At least 8 alpha numeric characters
    NoEcho: true
  AllowUploadDownload:
    Description: Automatically download Blade Contracts and other important data.
      Improve product experience by sending data to Check Point
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  CloudWatch:
    Description: Report Check Point specific CloudWatch metrics
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  GatewayBootstrapScript:
    Description: An optional script with semicolon (;) separated commands to run on the initial boot (optional)
    Type: String
    Default: ''
    NoEcho: true
  ControlGatewayOverPrivateOrPublicAddress:
    Description: Determines if the gateways are provisioned using their private or public address
    Type: String
    Default: private
    AllowedValues:
      - private
      - public
  ManagementServer:
    Description: The name that represents the Security Management Server in the automatic provisioning configuration
    Type: String
    Default: management-server
    MinLength: 1
  ConfigurationTemplate:
    Description: A name of a gateway configuration template in the automatic provisioning configuration
    Type: String
    Default: ASG-configuration
    MinLength: 1
  ELBType:
    Type: String
    Default: none
    AllowedValues:
      - none
      - internal
      - internet-facing
  ELBPort:
    Type: Number
    Default: 8080
  ELBClients:
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
Conditions:
  ProvidedAdminEmail: !Not [!Equals [!Ref AdminEmail, '']]
  ProvidedTargetGroups: !Not [!Equals [!Ref GatewaysTargetGroups, '']]
  EnableCloudWatch: !Equals [!Ref CloudWatch, true]
  CreateELB: !Not [!Equals [!Ref ELBType, none]]
Resources:
  ChkpGatewayRole:
    Type: AWS::IAM::Role
    Condition: EnableCloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ChkpGatewayPoliocy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EnableCloudWatch
    Properties:
      Path: /
      Roles:
        - !Ref ChkpGatewayRole
  AMI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/gwlb/amis-gwlb.yaml
      Parameters:
        Version: !Join ['-', [!Ref GatewayVersion, GW]]
  NotificationTopic:
    Type: AWS::SNS::Topic
    Condition: ProvidedAdminEmail
    Properties:
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: CreateELB
    Properties:
      CrossZone: true
      Listeners:
        - LoadBalancerPort: !Ref ELBPort
          InstancePort: !Ref ELBPort
          Protocol: TCP
      HealthCheck:
        Target: !Join [':', [TCP, !Ref ELBPort]]
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      Scheme: !Ref ELBType
      Subnets: !Ref GatewaysSubnets
      Policies:
        - PolicyName: EnableProxyProtocol
          PolicyType: ProxyProtocolPolicyType
          Attributes:
            - Name: ProxyProtocol
              Value: true
          InstancePorts:
            - !Ref ELBPort
      SecurityGroups:
        - !Ref ELBSecurityGroup
  PermissiveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['_', [!Ref 'AWS::StackName', PermissiveSecurityGroup]]
      GroupDescription: Permissive security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  GatewayGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: GatewayLaunchConfig
    Properties:
      VPCZoneIdentifier: !Ref GatewaysSubnets
      LaunchConfigurationName: !Ref GatewayLaunchConfig
      MinSize: !Ref GatewaysMinSize
      MaxSize: !Ref GatewaysMaxSize
      LoadBalancerNames: !If [CreateELB, [!Ref ElasticLoadBalancer], !Ref 'AWS::NoValue']
      TargetGroupARNs: !If [ProvidedTargetGroups, !Split [',', !Ref GatewaysTargetGroups], !Ref 'AWS::NoValue']
      NotificationConfiguration: !If
        - ProvidedAdminEmail
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Ref GatewayName
          PropagateAtLaunch: true
        - Key: x-chkp-tags
          Value: !Join
            - ':'
            - - !Join ['=', [management, !Ref ManagementServer]]
              - !Join ['=', [template, !Ref ConfigurationTemplate]]
              - !Join ['=', [ip-address, !Ref ControlGatewayOverPrivateOrPublicAddress]]
          PropagateAtLaunch: true
        - Key: x-chkp-topology
          Value: internal
          PropagateAtLaunch: true
  GatewayLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      KeyName: !Ref KeyName
      ImageId: !GetAtt AMI.Outputs.ImageId
      SecurityGroups:
        - !Ref PermissiveSecurityGroup
      InstanceType: !Ref GatewayInstanceType
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            Encrypted: !Ref EnableVolumeEncryption
            VolumeType: gp2
            VolumeSize: !Ref VolumeSize
      IamInstanceProfile: !If [EnableCloudWatch, !Ref InstanceProfile, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64':
          !Join
          - |+

          - - '#!/bin/bash'
            - 'set -e'
            - 'logfile=/var/log/aws-user-data.log'
            - '> ${logfile}'
            - 'exec 1>>${logfile} 2>>${logfile}'
            - 'echo -e "\nStarting user-data\n"'
            - 'echo "Setting up parameters"'
            - !Sub 'pwd_hash=''${GatewayPasswordHash}'' ; shell=${Shell} ; allow_info=${AllowUploadDownload} ; cw=${CloudWatch} ; eic=${EnableInstanceConnect}'
            - !Join ['', ['sic="$(echo ', 'Fn::Base64': !Ref GatewaySICKey, ' | base64 -d)"']]
            - !Join ['', ['bootstrap="$(echo ', 'Fn::Base64': !Ref GatewayBootstrapScript, ' | base64 -d)"']]
            - 'echo "Updating cloud-version file"'
            - 'template="autoscale"'
            - 'cv_path="/etc/cloud-version"'
            - 'echo "Updating cloud-version file"'
            - 'if test -f ${cv_path}; then'
            - '    echo template_name: ${template} >> ${cv_path}'
            - '    echo template_version: 20210525 >> ${cv_path}'
            - 'fi'
            - 'cv_json_path="/etc/cloud-version.json"'
            - 'cv_json_path_tmp="/etc/cloud-version-tmp.json"'
            - 'if test -f ${cv_json_path}; then'
            - '    cat ${cv_json_path} | jq ''.template_name = "''"${template}"''"'' | jq ''.template_version = "20210525"'' > ${cv_json_path_tmp}'
            - '    mv ${cv_json_path_tmp} ${cv_json_path}'
            - 'fi'
            - 'if [[ -z ${pwd_hash} ]]; then'
            - '    echo "Generating random password hash"'
            - '    pwd_hash="$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)"'
            - 'fi'
            - 'echo "Setting admin shell to ${shell}"'
            - 'clish -c "set user admin shell ${shell}" -s'
            - 'echo "Starting First Time Wizard"'
            - 'blink_config -s "gateway_cluster_member=false&ftw_sic_key=${sic}&upload_info=${allow_info}&download_info=${allow_info}&admin_hash=${pwd_hash}"'
            - 'echo "Setting admin password"'
            - 'clish -c "set user admin password-hash ${pwd_hash}" -s'
            - 'echo "Setting LocalGateway dynamic object"'
            - 'addr="$(ip addr show dev eth0 | awk ''/inet/{print $2; exit}'' | cut -d / -f 1)"'
            - 'dynamic_objects -n LocalGateway -r ${addr} ${addr} -a || true'
            - 'if ${cw}; then'
            - '    echo "Enabling CloudWatch"'
            - '    echo {"version": "1"} > /etc/fw/conf/cloudwatch.json'
            - '    cloudwatch start'
            - 'fi'
            - 'if ${eic}; then'
            - '    echo "Enabling ec2 instance connect"'
            - '    if [[ -d "/etc/ec2-instance-connect" ]]; then'
            - '        ec2-instance-connect-config on'
            - '    else'
            - '        echo "Could not enable eic, /etc/ec2-instance-connect was not found"'
            - '    fi'
            - 'fi'
            - 'if [[ -n ${bootstrap} ]]; then'
            - '    echo "Invoking bootstrap script"'
            - '    eval ${bootstrap}'
            - 'fi'
  GatewayScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref GatewayGroup
      Cooldown: 300
      ScalingAdjustment: 1
  GatewayScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref GatewayGroup
      Cooldown: 300
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions:
        - !Ref GatewayScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref GatewayGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      AlarmActions:
        - !Ref GatewayScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref GatewayGroup
      ComparisonOperator: LessThanThreshold
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateELB
    Properties:
      GroupDescription: ELB security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref ELBClients
          FromPort: !Ref ELBPort
          ToPort: !Ref ELBPort
Outputs:
  URL:
    Description: The URL of the Proxy
    Condition: CreateELB
    Value: !Join ['', ['http://', !GetAtt ElasticLoadBalancer.DNSName]]
  SecurityGroup:
    Description: The Security Group of the Auto Scaling group
    Value: !GetAtt PermissiveSecurityGroup.GroupId
